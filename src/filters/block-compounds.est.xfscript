# block a compound word if:
# * its component belongs to a wrong word class

#
define WB [ "#" ];  # word border

#define W [ a | e | i | o | u | õ | ä | ö | ü ]; 
#define C [ b | d | f | g | h | j | k | l | m | n | p | r | s | t | v ] ;
#define ZZ [[W C+ W+ C*] | [W W W C*]];   # at least 2 syllables (kind of...)

define Nmber ["+Sg" | "+Pl" ];

# derivation
# V -> 

define vderneedspar [  "+Der/v" | "+Der/tav" | "+Der/mata" | "+Der/matu" | 
                     "+Der/nud" | "+Der/nu" | "+Der/tu" | "+Der/tud"] ;   # suftyyp 19, 20
define vderneedsgen ["+Der/mine" | "+Der/ja" | "+Der/mus" | "+Der/ng" ] ; # suftyyp 18

define AnyDer ["+Der/mine" | "+Der/ja" | "+Der/nu" | "+Der/mus" | "+Der/ng" | "+Der/v" | "+Der/tav" | 
                "+Der/nud" | "+Der/mata" | "+Der/matu" | "+Der/tamatu" | "+Der/tu" | "+Der/tud" | 
                 "+Der/us" | "+Der/lik" | "+Der/line" | "+Der/lt" | "+Der/sti" | "+Der/m" | "+Der/im" | 
                "+Der/nna" | "+Der/kond" | "+Der/ti" | "+Der/lane" | "+Der/minus" ] ;

# some wordclasses are never in compounds
define BadEver [ "+Adp" | "+PUNCT" | "+CLB" ] ;
define BadFirst [ "+V" \[WB | AnyDer | "+Inf" | "+Sup"]* WB] ;
define BadLast [WB \WB* ["+Pron" | "+Interj" | "+CC" | "+CS"]];
define BadCmp $[BadEver | BadFirst | BadLast];

# a verb cannot be the last part of a compound, unless it is a derivation;
# and a derivation requires the previous part in a certain form;
# the good constellations are negated below
 
define BadVerb [ $[ WB ?* "+V" ] & 
               ~$[ "+N" Nmber \["+Nom" | "+Par"] \[AnyDer]* WB ?* "+V" vderneedsgen ] &   # lauauhmaja
               ~$[ "+N" Nmber \["+Nom" | "+Gen"] \[AnyDer]* WB ?* "+V" vderneedspar ] &   # laudauhmav
               ~$[ "+Num" "+Card" Nmber Gen \[AnyDer]* WB ?* "+V" vderneedsgen ] &        # viiekirjutamine
               ~$[ "+V" \[AnyDer]* ["+Inf" | "+Sup"] \[AnyDer]*  WB ?* "+V" [vderneedspar | "+Der/mine" | "+Der/ja"]]
                ];  # NB! not finished!

regex ~[ BadCmp | BadVerb ] ;
#regex ~[ BadCmp  ] ;



