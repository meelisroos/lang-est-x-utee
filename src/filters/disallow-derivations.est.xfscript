# disallow a derivation if its base belongs to a wrong word class
# (this happens because derivation is attached to a case form, 
# but by that time the word class is not available for the fst)

#

define N [ "+N" ];
define A [ "+A" ];
define Comp [ "+Comp" ] ;
define Superl [ "+Superl"];
define Num [ "+Num" ];
define Card [ "+Card" ];

# a BadDer is a string +Der/..., preceded by an unsuitable symbol or string, 
# expressed here as a negation of the suitable one
# notice that if the preceding thing is a string, then the negations must have equal length
# (hence [? \N])
 
define BadDer [
    [[[? \N] & [\Num \Card]] "+Der/lik"] |
    [[[? \N] & [\Num \Card]] "+Der/line"] |
    [[[? \A] & [\A \Comp] & [\A \Superl]] "+Der/lt"] |
    [\A "+Der/sti"] |
    [[[? \A] & [\A \Comp] & [\A \Superl]] "+Der/ini"] |
    [\A "+Der/m"] |
    [\A "+Der/im"] |
    [\N "+Der/nna"] |
    [[[? \N] & [\Num \Card]] "+Der/kond"] |
    [[[? \A] & [\A \Comp] & [\A \Superl]] "+Der/us"] |
    [\N "+Der/ti"] |
    [[[? \N] & [\Num \Card] & [? \A] & [\A \Comp] & [\A \Superl]] "+Dim/ke"]
    ] ;

regex ~[ ?* BadDer ?* ].i ;

