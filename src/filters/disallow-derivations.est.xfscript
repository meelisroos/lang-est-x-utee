# disallow a derivation if its base belongs to a wrong word class
# (this happens because derivation is attached to a case form, 
# but by that time the word class is not available for the fst)

#
define WB [ "#" ];

define V [ "+V" ];
define N [ "+N" ];
define A [ "+A" ];
define Comp [ "+Comp" ] ;
define Superl [ "+Superl"];
define Num [ "+Num" ];
define Card [ "+Card" ];

# a BadDer1 is a string +Der/..., preceded by an unsuitable symbol or string, 
# expressed here as a negation of the suitable one
 
define BadDer1 [
    [[~[?+ N] & ~[?+ Num Card]] "+Der/lik"] |
    [[~[?+ N] & ~[?+ Num Card]] "+Der/line"] |
    [[~[?+ A] & ~[?+ A Comp] & ~[?+ A Superl]] "+Der/lt"] |
    [\A "+Der/sti"] |
    [[~[?+ A Comp] ] "+Der/ini"] |
    [\A "+Der/m"] |
    [\A "+Der/im"] |
    [ ~[?+ j a N] "+Der/nna"] |
    [[~[?+ N] & ~[?+ Num Card]] "+Der/kond"] |
    [[~[?+ A] & ~[?+ A Comp] & ~[?+ A Superl] & ~[?+ t a V]] "+Der/us"] |
    [\N "+Der/ti"] |
    [[~[?+ N] & ~[?+ Num Card] & ~[?+ A] & ~[?+ A Comp] & ~[?+ A Superl]] "+Dim/ke"]
    ] ;

# re-applying a suffix is not allowed
define BadDer2 [
    ["+Der/lik" \WB* "+Der/lik"] |
    ["+Der/line" \WB* "+Der/line"] |
    [["+Der/m" | "+Der/im"] \WB* ["+Der/m" | "+Der/im"]] |
    ["+Der/lik" \WB* "+Der/lik"] |
    ["+Der/us" \WB* "+Der/us"] 
    ] ;

regex ~[ BadDer1 ?* ].i .o. ~[ ?* BadDer2 ?* ].i;

